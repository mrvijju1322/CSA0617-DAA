#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>


void printBoard(int **board, int N) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            printf("%2d ", board[i][j]);
        printf("\n");
    }
    printf("\n");  
}


bool isSafe(int **board, int row, int col, int N) {
    int i, j;

    
    for (i = 0; i < col; i++)
        if (board[row][i])
            return false;

    
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j])
            return false;

    
    for (i = row, j = col; i < N && j >= 0; i++, j--)
        if (board[i][j])
            return false;

    return true;
}


bool solveNQueensUtil(int **board, int col, int N) {
    if (col >= N)
        return true;

    for (int i = 0; i < N; i++) {
        if (isSafe(board, i, col, N)) {
            board[i][col] = 1;

            if (solveNQueensUtil(board, col + 1, N))
                return true;

            board[i][col] = 0; 
        }
    }

    return false;
}


void solveNQueens(int N) {
    int **board = (int **)malloc(N * sizeof(int *));
    for (int i = 0; i < N; i++) {
        board[i] = (int *)malloc(N * sizeof(int));
        for (int j = 0; j < N; j++)
            board[i][j] = 0;
    }

    printf("Two possible solutions:\n");

    int solutionsFound = 0;
    for (int i = 0; i < 2; i++) {
        if (solveNQueensUtil(board, 0, N)) {
            printBoard(board, N);
            solutionsFound++;
        } else {
            printf("No solution found for solution %d\n", i + 1);
        }
        
        for (int row = 0; row < N; row++)
            for (int col = 0; col < N; col++)
                board[row][col] = 0;
    }

    if (solutionsFound == 0) {
        printf("No solutions found.\n");
    }

    
    for (int i = 0; i < N; i++)
        free(board[i]);
    free(board);
}

int main() {
    int N;

    
    printf("Enter the size of the chessboard (N): ");
    scanf("%d", &N);

    if (N <= 0) {
        printf("Please enter a valid positive integer for N.\n");
        return 1;
    }

    solveNQueens(N);

    return 0;
}
